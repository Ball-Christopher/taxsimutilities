// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// greg_cpp_one
arma::mat greg_cpp_one(arma::colvec W, arma::mat& C, arma::vec& B);
RcppExport SEXP _taxsimutilities_greg_cpp_one(SEXP WSEXP, SEXP CSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(greg_cpp_one(W, C, B));
    return rcpp_result_gen;
END_RCPP
}
// fast_bs_sum
NumericVector fast_bs_sum(NumericVector pattern);
RcppExport SEXP _taxsimutilities_fast_bs_sum(SEXP patternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type pattern(patternSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_bs_sum(pattern));
    return rcpp_result_gen;
END_RCPP
}
// fast_group_sum
NumericVector fast_group_sum(NumericVector x, IntegerVector grp);
RcppExport SEXP _taxsimutilities_fast_group_sum(SEXP xSEXP, SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_group_sum(x, grp));
    return rcpp_result_gen;
END_RCPP
}
// fast_group_max
NumericVector fast_group_max(NumericVector x, IntegerVector grp);
RcppExport SEXP _taxsimutilities_fast_group_max(SEXP xSEXP, SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_group_max(x, grp));
    return rcpp_result_gen;
END_RCPP
}
// fast_group_min
NumericVector fast_group_min(NumericVector x, IntegerVector grp);
RcppExport SEXP _taxsimutilities_fast_group_min(SEXP xSEXP, SEXP grpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type grp(grpSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_group_min(x, grp));
    return rcpp_result_gen;
END_RCPP
}
// gini_sorted
double gini_sorted(const std::vector<double> y, const std::vector<double> w);
RcppExport SEXP _taxsimutilities_gini_sorted(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(gini_sorted(y, w));
    return rcpp_result_gen;
END_RCPP
}
// fast_poverty
NumericMatrix fast_poverty(const std::vector<double> y, const std::vector<double> w, const std::vector<double> k, int ncores);
RcppExport SEXP _taxsimutilities_fast_poverty(SEXP ySEXP, SEXP wSEXP, SEXP kSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type w(wSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_poverty(y, w, k, ncores));
    return rcpp_result_gen;
END_RCPP
}
// fast_med
double fast_med(NumericVector y, NumericVector w);
RcppExport SEXP _taxsimutilities_fast_med(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_med(y, w));
    return rcpp_result_gen;
END_RCPP
}
// fast_pov
double fast_pov(NumericVector y, NumericVector w, double thres);
RcppExport SEXP _taxsimutilities_fast_pov(SEXP ySEXP, SEXP wSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_pov(y, w, thres));
    return rcpp_result_gen;
END_RCPP
}
// fast_cpov
double fast_cpov(NumericVector y, NumericVector w, NumericVector k, double thres);
RcppExport SEXP _taxsimutilities_fast_cpov(SEXP ySEXP, SEXP wSEXP, SEXP kSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_cpov(y, w, k, thres));
    return rcpp_result_gen;
END_RCPP
}
// fast_povgap
double fast_povgap(NumericVector y, NumericVector w, double thres, double exp);
RcppExport SEXP _taxsimutilities_fast_povgap(SEXP ySEXP, SEXP wSEXP, SEXP thresSEXP, SEXP expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    Rcpp::traits::input_parameter< double >::type exp(expSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_povgap(y, w, thres, exp));
    return rcpp_result_gen;
END_RCPP
}
// theil_l
double theil_l(NumericVector y, NumericVector w);
RcppExport SEXP _taxsimutilities_theil_l(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(theil_l(y, w));
    return rcpp_result_gen;
END_RCPP
}
// theil_t
double theil_t(NumericVector y, NumericVector w);
RcppExport SEXP _taxsimutilities_theil_t(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(theil_t(y, w));
    return rcpp_result_gen;
END_RCPP
}
// gen_ent
double gen_ent(NumericVector y, NumericVector w, double a);
RcppExport SEXP _taxsimutilities_gen_ent(SEXP ySEXP, SEXP wSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_ent(y, w, a));
    return rcpp_result_gen;
END_RCPP
}
// atkinson_1
double atkinson_1(NumericVector y, NumericVector w);
RcppExport SEXP _taxsimutilities_atkinson_1(SEXP ySEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(atkinson_1(y, w));
    return rcpp_result_gen;
END_RCPP
}
// atkinson_e
double atkinson_e(NumericVector y, NumericVector w, double e);
RcppExport SEXP _taxsimutilities_atkinson_e(SEXP ySEXP, SEXP wSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(atkinson_e(y, w, e));
    return rcpp_result_gen;
END_RCPP
}
// greg_cpp
arma::mat greg_cpp(arma::colvec W, arma::mat& C, arma::vec& B, arma::colvec& L, arma::colvec& U);
RcppExport SEXP _taxsimutilities_greg_cpp(SEXP WSEXP, SEXP CSEXP, SEXP BSEXP, SEXP LSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(greg_cpp(W, C, B, L, U));
    return rcpp_result_gen;
END_RCPP
}
// run_sim_cpp
void run_sim_cpp(int iters, const int M, const int N, const std::vector<int> index, const std::vector<float> U, const std::vector<float> EU, const std::vector<float> V, const std::vector<float> s_v, const std::vector<float> obs_util, const std::vector<float> alt_obs_util, const std::vector<float> h, const std::vector<float> a, const std::vector<float> b, const std::vector<float> sw_cv, const std::vector<float> sw_ev, const std::vector<float> fc, const std::vector<float> inflator, const std::vector<float> sub_disp, const std::vector<float> sub_alt_disp, const std::vector<int> ID, NumericMatrix out, NumericMatrix CV, NumericMatrix EV, NumericMatrix disp_matrix, const std::vector<float> cw, const std::vector<float> lambda, int ncores);
RcppExport SEXP _taxsimutilities_run_sim_cpp(SEXP itersSEXP, SEXP MSEXP, SEXP NSEXP, SEXP indexSEXP, SEXP USEXP, SEXP EUSEXP, SEXP VSEXP, SEXP s_vSEXP, SEXP obs_utilSEXP, SEXP alt_obs_utilSEXP, SEXP hSEXP, SEXP aSEXP, SEXP bSEXP, SEXP sw_cvSEXP, SEXP sw_evSEXP, SEXP fcSEXP, SEXP inflatorSEXP, SEXP sub_dispSEXP, SEXP sub_alt_dispSEXP, SEXP IDSEXP, SEXP outSEXP, SEXP CVSEXP, SEXP EVSEXP, SEXP disp_matrixSEXP, SEXP cwSEXP, SEXP lambdaSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< const int >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type U(USEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type EU(EUSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type V(VSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type s_v(s_vSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type obs_util(obs_utilSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type alt_obs_util(alt_obs_utilSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type h(hSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type a(aSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type b(bSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type sw_cv(sw_cvSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type sw_ev(sw_evSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type fc(fcSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type inflator(inflatorSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type sub_disp(sub_dispSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type sub_alt_disp(sub_alt_dispSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type ID(IDSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type out(outSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type CV(CVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type EV(EVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type disp_matrix(disp_matrixSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type cw(cwSEXP);
    Rcpp::traits::input_parameter< const std::vector<float> >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    run_sim_cpp(iters, M, N, index, U, EU, V, s_v, obs_util, alt_obs_util, h, a, b, sw_cv, sw_ev, fc, inflator, sub_disp, sub_alt_disp, ID, out, CV, EV, disp_matrix, cw, lambda, ncores);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_taxsimutilities_greg_cpp_one", (DL_FUNC) &_taxsimutilities_greg_cpp_one, 3},
    {"_taxsimutilities_fast_bs_sum", (DL_FUNC) &_taxsimutilities_fast_bs_sum, 1},
    {"_taxsimutilities_fast_group_sum", (DL_FUNC) &_taxsimutilities_fast_group_sum, 2},
    {"_taxsimutilities_fast_group_max", (DL_FUNC) &_taxsimutilities_fast_group_max, 2},
    {"_taxsimutilities_fast_group_min", (DL_FUNC) &_taxsimutilities_fast_group_min, 2},
    {"_taxsimutilities_gini_sorted", (DL_FUNC) &_taxsimutilities_gini_sorted, 2},
    {"_taxsimutilities_fast_poverty", (DL_FUNC) &_taxsimutilities_fast_poverty, 4},
    {"_taxsimutilities_fast_med", (DL_FUNC) &_taxsimutilities_fast_med, 2},
    {"_taxsimutilities_fast_pov", (DL_FUNC) &_taxsimutilities_fast_pov, 3},
    {"_taxsimutilities_fast_cpov", (DL_FUNC) &_taxsimutilities_fast_cpov, 4},
    {"_taxsimutilities_fast_povgap", (DL_FUNC) &_taxsimutilities_fast_povgap, 4},
    {"_taxsimutilities_theil_l", (DL_FUNC) &_taxsimutilities_theil_l, 2},
    {"_taxsimutilities_theil_t", (DL_FUNC) &_taxsimutilities_theil_t, 2},
    {"_taxsimutilities_gen_ent", (DL_FUNC) &_taxsimutilities_gen_ent, 3},
    {"_taxsimutilities_atkinson_1", (DL_FUNC) &_taxsimutilities_atkinson_1, 2},
    {"_taxsimutilities_atkinson_e", (DL_FUNC) &_taxsimutilities_atkinson_e, 3},
    {"_taxsimutilities_greg_cpp", (DL_FUNC) &_taxsimutilities_greg_cpp, 5},
    {"_taxsimutilities_run_sim_cpp", (DL_FUNC) &_taxsimutilities_run_sim_cpp, 27},
    {NULL, NULL, 0}
};

RcppExport void R_init_taxsimutilities(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
